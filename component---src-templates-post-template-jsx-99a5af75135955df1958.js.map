{"version":3,"sources":["webpack:///./src/components/Comment/Disqus.jsx","webpack:///./src/components/Comment/Comment.jsx","webpack:///./src/components/Post/PostTags.jsx","webpack:///./src/components/Post/PostShare.jsx","webpack:///./src/components/Post/PostDivider.jsx","webpack:///./src/components/Post/PostCategories.jsx","webpack:///./src/components/Post/Post.jsx","webpack:///./src/templates/post-template.jsx","webpack:///./src/components/Post/PostDate.jsx","webpack:///./src/components/SEO/SEO.jsx"],"names":["Disqus","props","_this","_Component","call","this","state","toasts","notifyAboutComment","bind","assertThisInitialized_default","onSnackbarDismiss","slice","setState","push","text","render","postNode","config","disqusShortname","post","frontmatter","url","urljoin","siteUrl","pathPrefix","fields","slug","react_default","a","createElement","main_default","shortname","identifier","title","category_id","onNewComment","Component","Comment","isShow","lazyload","handleClick","prevState","_this$props","extraClass","btnLoadComments","className","onClick","Comment_Disqus","PostTags","_ref","tags","_ref$extraClass","_ref$iconColor","iconColor","Fragment","postTagged","index_es","icon","style","color","width","map","tag","index","key","AutoLink","to","getTagPath","label","tagLink","length","PostShare","postPath","renderShareCount","count","filter","RedditShareButton","RedditIcon","round","size","RedditShareCount","TwitterShareButton","TwitterIcon","FacebookShareButton","quote","excerpt","FacebookIcon","FacebookShareCount","TelegramShareButton","TelegramIcon","PostDivider","PostCategories","categories","postInCategories","category","getCategoryPath","categoryLink","Post","id","postDefaultCategoryID","PostDate","date","Post_PostShare","Post_PostDivider","dangerouslySetInnerHTML","__html","html","Post_PostCategories","Post_PostTags","components_Comment_Comment","lazyLoadComments","__webpack_require__","d","__webpack_exports__","pageQuery","PostTemplate","data","pageContext","tagList","categoryList","latestPostEdges","markdownRemark","content","components_Post_Post","sidebar","Sidebar","links","sidebarLinks","layout","Helmet_default","siteTitle","SEO","postSEO","Header","MainContainer","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_utils_helpers__WEBPACK_IMPORTED_MODULE_1__","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_2__","_data_SiteConfig__WEBPACK_IMPORTED_MODULE_2___default","postOnDate","formatDate","description","keywords","postURL","image","postMeta","cover","childImageSharp","fixed","src","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","@context","@type","name","alternateName","siteTitleAlt","itemListElement","position","item","@id","headline","react__WEBPACK_IMPORTED_MODULE_2___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-templates-post-template-jsx-99a5af75135955df1958.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDisqusComments from \"react-disqus-comments\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass Disqus extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toasts: []\n    };\n    this.notifyAboutComment = this.notifyAboutComment.bind(this);\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this);\n  }\n\n  onSnackbarDismiss() {\n    const [, ...toasts] = this.state.toasts;\n    this.setState({ toasts });\n  }\n  notifyAboutComment() {\n    const toasts = this.state.toasts.slice();\n    toasts.push({ text: \"New comment available!\" });\n    this.setState({ toasts });\n  }\n  render() {\n    const { postNode } = this.props;\n    if (!config.disqusShortname) {\n      return null;\n    }\n    const post = postNode.frontmatter;\n    const url = urljoin(\n      config.siteUrl,\n      config.pathPrefix,\n      postNode.fields.slug\n    );\n    return (\n      <ReactDisqusComments\n        shortname={config.disqusShortname}\n        identifier={post.title}\n        title={post.title}\n        url={url}\n        category_id={post.category_id}\n        onNewComment={this.notifyAboutComment}\n      />\n    );\n  }\n}\n\nexport default Disqus;\n","import React, { Component } from \"react\";\nimport Disqus from \"./Disqus\";\n\nclass Comment extends Component {\n  state = {\n    isShow: !this.props.lazyload\n  }\n\n  handleClick = () => {\n    this.setState(prevState => ({\n      isShow: !prevState.isShow\n    }));\n  }\n\n  render() {\n    const { extraClass, postNode, btnLoadComments } = this.props;\n\n    return (\n      <div className={`comment-container text-center ${extraClass}`}>\n        {!this.state.isShow && (\n          <button className=\"btn-primary\" onClick={this.handleClick}>\n            {btnLoadComments}\n          </button>\n        )}\n\n        {this.state.isShow && (\n          <Disqus postNode={postNode} />\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Comment;","import React from \"react\";\nimport AutoLink from \"../AutoLink/AutoLink\";\nimport { getTagPath } from \"../../utils/helpers\";\nimport config from \"../../../data/SiteConfig\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst PostTags = ({ tags, extraClass = \"\", iconColor = \"#444\"}) => {\n  const tagLink = tag => (\n    <AutoLink \n      className=\"text-uppercase\" \n      to={getTagPath(tag)} \n      label={tag} \n    >\n      {tag}\n    </AutoLink>\n  )\n\n  return (\n    <>\n      {tags && (\n        <div className={`post-tags-container ${extraClass}`}>\n          <b>\n            {config.postTagged && (\n              <span>{config.postTagged} </span>\n            )}\n\n            {!config.postTagged && (\n              <>\n                <FontAwesomeIcon icon={[\"fas\", \"tags\"]} style={{ color: iconColor, width: \"20px\" }} />\n                {\" \"}\n              </>\n            )}\n\n            {\n              tags.map((tag, index) => (\n                <span key={tag}>\n                  {tagLink(tag)}\n                  {index < tags.length - 1 && <>, </>}\n                </span>\n              ))\n            }\n          </b>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default PostTags;","import React from \"react\";\nimport {\n  FacebookShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  RedditIcon\n} from \"react-share\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nconst PostShare = ({ postNode, postPath, extraClass = \"\" }) => {\n  const post = postNode.frontmatter;\n  const url = urljoin(config.siteUrl, config.pathPrefix, postPath);\n  const iconSize = 26;\n  const filter = count => (count > 0 ? count : \"\");\n  const renderShareCount = count => (\n    <div className=\"text-center\">{filter(count)}</div>\n  );\n\n  return (\n    <div className={`flex ${extraClass}`}>\n      <RedditShareButton className=\"cursor-pointer margin-right-half\" url={url} title={post.title}>\n        <RedditIcon round size={iconSize} />\n        <RedditShareCount url={url}>\n          {count => renderShareCount(count)}\n        </RedditShareCount>\n      </RedditShareButton>\n\n      <TwitterShareButton className=\"cursor-pointer margin-right-half\" url={url} title={post.title}>\n        <TwitterIcon round size={iconSize} />\n      </TwitterShareButton>\n\n      <FacebookShareButton className=\"cursor-pointer margin-right-half\" url={url} quote={postNode.excerpt}>\n        <FacebookIcon round size={iconSize} />\n        <FacebookShareCount url={url}>\n          {count => renderShareCount(count)}\n        </FacebookShareCount>\n      </FacebookShareButton>\n\n      <TelegramShareButton className=\"cursor-pointer\" url={url}>\n        <TelegramIcon round size={iconSize} />\n      </TelegramShareButton>\n    </div>\n  )\n}\n\nexport default PostShare;","import React from \"react\";\n\nconst PostDivider = () => (\n  <div \n    className=\"post-divider border-bottom border-color-light-grey margin-bottom-half margin-top-half\" \n  />\n)\n\nexport default PostDivider;","import React from \"react\";\nimport AutoLink from \"../AutoLink/AutoLink\";\nimport { getCategoryPath } from \"../../utils/helpers\";\nimport config from \"../../../data/SiteConfig\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst PostCategories = ({ categories, extraClass = \"\", iconColor = \"#444\"}) => {\n  const categoryLink = category => (\n    <AutoLink \n      className=\"text-uppercase\" \n      to={getCategoryPath(category)} \n      label={category} \n    >\n      {category}\n    </AutoLink>\n  )\n\n  return (\n    <>\n      {categories && (\n        <div className={`post-categories-container ${extraClass}`}>\n          <b>\n            {config.postInCategories && (\n              <span>{config.postInCategories} </span>\n            )}\n\n            {!config.postInCategories && (\n              <>\n                <FontAwesomeIcon icon={[\"fas\", \"folder-open\"]} style={{ color: iconColor, width: \"20px\" }} />\n                {\" \"}\n              </>\n            )}\n\n            {\n              categories.map((category, index) => (\n                <span key={category}>\n                  {categoryLink(category)}\n                  {index < categories.length - 1 && <>, </>}\n                </span>\n              ))\n            }\n          </b>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default PostCategories;","import React from \"react\";\nimport Comment from \"../Comment/Comment\";\nimport PostTags from \"./PostTags\";\nimport PostShare from \"./PostShare\";\nimport PostDate from \"./PostDate\";\nimport PostDivider from \"./PostDivider\";\nimport PostCategories from \"./PostCategories\";\nimport \"./Post.scss\";\nimport \"../../../content/styles/code-highlight.scss\";\n\nconst Post = ({ postNode, config, slug }) => {\n  const post = postNode.frontmatter;\n  if (!post.id) {\n    post.id = slug;\n  }\n  if (!post.category_id) {\n    post.category_id = config.postDefaultCategoryID;\n  }\n\n  return (\n    <div className=\"post-container\">\n      <div className=\"meta-share-wrapper padding-top padding-bottom\">\n        <PostDate extraClass=\"meta-wrapper\" date={post.date} /> \n        <PostShare extraClass=\"share-wrapper\" postPath={slug} postNode={postNode} />\n      </div>\n      <PostDivider />\n      <div \n        className=\"padding-top padding-bottom\" \n        dangerouslySetInnerHTML={{ __html: postNode.html }} \n      />\n      <PostDivider />\n      <div className=\"padding-top padding-bottom\">\n        <small>\n          <PostCategories categories={post.categories} extraClass=\"block\" iconColor=\"#555\" />\n          <PostTags tags={post.tags} extraClass=\"block padding-top-half\" iconColor=\"#555\" />\n        </small>\n      </div>\n      <PostDivider />\n      <Comment \n        postNode={postNode} \n        extraClass=\"padding-top\" \n        lazyload={config.lazyLoadComments} \n        btnLoadComments={config.btnLoadComments}\n      />\n    </div>\n  )\n}\n\nexport default Post;","import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport { graphql } from \"gatsby\";\nimport Layout from \"../layout\";\nimport Header from \"../components/Header/Header\";\nimport MainContainer from \"../components/MainContainer/MainContainer\";\nimport Sidebar from \"../components/Sidebar/Sidebar\";\nimport Post from \"../components/Post/Post\";\nimport SEO from \"../components/SEO/SEO\";\nimport config from \"../../data/SiteConfig\";\n\nconst PostTemplate = ({ data, pageContext }) => {\n  const { slug, tagList, categoryList, latestPostEdges } = pageContext;\n  const postNode = data.markdownRemark;\n  const title = postNode.frontmatter.title;\n  const content = <Post postNode={postNode} config={config} slug={slug} />;\n  const sidebar = <Sidebar \n    tagList={tagList} \n    categoryList={categoryList}\n    latestPostEdges={latestPostEdges} \n    links={config.sidebarLinks}\n  />;\n\n  return (\n    <Layout>\n      <Helmet>\n        <title>{`${title} - ${config.siteTitle}`}</title>\n      </Helmet>\n      <SEO postPath={slug} postNode={postNode} postSEO />\n      <Header title={title} />\n      <MainContainer content={content} sidebar={sidebar} />\n    </Layout>\n  );\n}\n\nexport default PostTemplate;\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      excerpt\n      frontmatter {\n        title\n        date\n        categories\n        tags\n        description\n        keywords\n        cover {\n          childImageSharp {\n            fixed(width: 660, quality: 100) {\n              ...GatsbyImageSharpFixed\n            }\n          }\n        }\n      }\n      fields {\n        slug\n        date\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { formatDate } from \"../../utils/helpers\";\nimport config from \"../../../data/SiteConfig\";\n\nconst PostDate = ({ date, extraClass = \"\" }) => (\n  <div className={`text-description ${extraClass}`}>\n    {config.postOnDate} {formatDate(date)}\n  </div>\n)\n\nexport default PostDate;","import React, { Component } from \"react\";\nimport Helmet from \"react-helmet\";\nimport urljoin from \"url-join\";\nimport config from \"../../../data/SiteConfig\";\n\nclass SEO extends Component {\n  render() {\n    const { postNode, postPath, postSEO } = this.props;\n    let title;\n    let description;\n    let keywords;\n    let image = \"\";\n    let postURL;\n    if (postSEO) {\n      const postMeta = postNode.frontmatter;\n      ({ title } = postMeta);\n      description = postMeta.description\n        ? postMeta.description\n        : postNode.excerpt;\n\n      keywords = postMeta.keywords\n\n      if (postMeta.cover) {\n        image = postMeta.cover.childImageSharp.fixed.src;\n      }\n\n      postURL = urljoin(config.siteUrl, config.pathPrefix, postPath);\n    } else {\n      title = config.siteTitle;\n      description = config.siteDescription;\n      image = config.siteLogo;\n    }\n\n    image = urljoin(config.siteUrl, config.pathPrefix, image);\n    const blogURL = urljoin(config.siteUrl, config.pathPrefix);\n    const schemaOrgJSONLD = [\n      {\n        \"@context\": \"http://schema.org\",\n        \"@type\": \"WebSite\",\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\"\n      }\n    ];\n    if (postSEO) {\n      schemaOrgJSONLD.push(\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BreadcrumbList\",\n          itemListElement: [\n            {\n              \"@type\": \"ListItem\",\n              position: 1,\n              item: {\n                \"@id\": postURL,\n                name: title,\n                image\n              }\n            }\n          ]\n        },\n        {\n          \"@context\": \"http://schema.org\",\n          \"@type\": \"BlogPosting\",\n          url: blogURL,\n          name: title,\n          alternateName: config.siteTitleAlt ? config.siteTitleAlt : \"\",\n          headline: title,\n          image: {\n            \"@type\": \"ImageObject\",\n            url: image\n          },\n          description\n        }\n      );\n    }\n    return (\n      <Helmet>\n        {/* General tags */}\n        <meta name=\"description\" content={description} />\n        <meta name=\"image\" content={image} />\n        {keywords && <meta name=\"keywords\" content={keywords} />}\n\n        {/* Schema.org tags */}\n        <script type=\"application/ld+json\">\n          {JSON.stringify(schemaOrgJSONLD)}\n        </script>\n\n        {/* OpenGraph tags */}\n        <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n        {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n        <meta property=\"og:title\" content={title} />\n        <meta property=\"og:description\" content={description} />\n        <meta property=\"og:image\" content={image} />\n        <meta\n          property=\"fb:app_id\"\n          content={config.siteFBAppID ? config.siteFBAppID : \"\"}\n        />\n\n        {/* Twitter Card tags */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta\n          name=\"twitter:creator\"\n          content={config.userTwitter ? config.userTwitter : \"\"}\n        />\n        <meta name=\"twitter:title\" content={title} />\n        <meta name=\"twitter:description\" content={description} />\n        <meta name=\"twitter:image\" content={image} />\n      </Helmet>\n    );\n  }\n}\n\nexport default SEO;\n"],"sourceRoot":""}